[{"name":"app.R","content":"## ======================================================== ##\n\n# Purpose: UI and Server for intensity-duration shiny app\n# Author: Tim Fulton\n# Date: January 25, 2025\n\n## ======================================================== ##\n\n# Source Scripts ----------------------------------------------------------\n# Load Packages -----------------------------------------------------------\nlibrary(shiny)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(shinycssloaders)\nlibrary(dplyr)\nlibrary(glue)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(scales)\n\n\n# Input Functions ----------------------------------------------------------\ngenerate_power_input <- function(index = 1) {\n  textInput(\n    inputId = paste0(\"power_\", index),\n    label = NULL,\n    width = 120,\n    placeholder = \"Power (W)\"\n  )\n}\n\ngenerate_distance_input <- function(index = 1) {\n  textInput(\n    inputId = paste0(\"distance_\", index),\n    label = NULL,\n    width = 120,\n    placeholder = \"Distance (m)\"\n  )\n}\n\ngenerate_duration_input <- function(index = 1) {\n  textInput(\n    inputId = paste0(\"duration_\", index),\n    label = NULL,\n    width = 120,\n    placeholder = \"Duration (s)\"\n  )\n}\n\nconvert_seconds_to_mmssms <- function(seconds) {\n  # Extract minutes and seconds\n  minutes <- floor(seconds / 60)\n  secs <- seconds %% 60\n  secs_int <- floor(secs)\n  secs_fraction <- round((secs - secs_int) * 100)\n  \n  # Format without leading zero\n  formatted_time <- sprintf(\"%d:%02d.%02d\", minutes, secs_int, secs_fraction)\n  \n  return(formatted_time)\n}\n\n# Modeling Functions ----------------------------------------------------------\n\n# Power\nfit_the_data <- function(data){\n  \n  tryCatch({\n    # Fit using non-linear function\n    model_fit <- nls(Seconds ~ w_prime / (Power - critical_power),\n                     data = data,\n                     start = list(critical_power = min(data$Power) - 50, w_prime = 10000))\n    \n    # Extract coefficients\n    cp_estimate <- summary(model_fit)$parameters[1, 1]\n    w_prime_estimate <- summary(model_fit)$parameters[2, 1]\n    \n    # Prepare fitted data for the plot\n    model_data_df <- data.frame(Seconds = seq(120, 1800, by = 1)) %>%\n      mutate(\n        Power = round(w_prime_estimate / Seconds + cp_estimate, 2),\n        Minutes = round(Seconds / 60, 2)\n      )\n    \n    # Calculate 5 min power\n    five_minute_power <- round((w_prime_estimate/300) + cp_estimate)\n    \n    # Calculate 20 min power\n    twenty_minute_power <- round((w_prime_estimate/1200) + cp_estimate)\n    \n    plot <- plot_the_data(data, model_data_df)\n    \n    model_data_list <- list(model_data_df, round(cp_estimate), prettyNum(round(w_prime_estimate), big.mark = \",\"), five_minute_power, twenty_minute_power, plot)\n    \n    return(model_data_list)\n  }, error = function(e){\n    return(\"error\")\n  })\n}\n\n# Speed\nfit_the_data_speed <- function(data){\n  \n  tryCatch({\n    # Fit using non-linear function\n    model_fit <- nls(Seconds ~ d_prime / (Speed - critical_speed),\n                     data = data,\n                     start = list(critical_speed = min(data$Speed) - 2, d_prime = 100))\n    \n    # Extract coefficients\n    cs_estimate <- summary(model_fit)$parameters[1, 1]\n    d_prime_estimate <- summary(model_fit)$parameters[2, 1]\n    \n    # Prepare fitted data for the plot\n    model_data_df <- data.frame(Seconds = seq(120, 1800, by = 0.1)) %>%\n      mutate(\n        Speed = d_prime_estimate / Seconds + cs_estimate,\n        Minutes = round(Seconds / 60, 2),\n        Distance = Seconds * Speed\n      )\n    \n    #index_mile <- which.min(abs(model_data_df$Distance - 1609))\n    \n    # Calculate Mile time\n    mile_time <- convert_seconds_to_mmssms(model_data_df$Seconds[which.min(abs(model_data_df$Distance - 1609))])\n    \n    # Calculate 25k Time\n    five_time <- convert_seconds_to_mmssms(model_data_df$Seconds[which.min(abs(model_data_df$Distance - 5000))])\n    \n    # Plot\n    plot <- plot_the_data_speed(data, model_data_df)\n    \n    model_data_list <- list(model_data_df, round(cs_estimate, 2), prettyNum(round(d_prime_estimate), big.mark = \",\"), mile_time, five_time, plot)\n    \n    return(model_data_list)\n  }, error = function(e){\n    return(\"error\")\n  })\n}\n\n# Plotting Functiona ----------------------------------------------------------\n\nplot_the_data <- function(user_data, model_data){\n  \n  plot <- ggplot(user_data, aes(x = Seconds, y = Power, label = Minutes)) +\n    geom_point(\n      shape = 21, \n      size = 3, \n      color = \"black\", \n      fill = \"white\"\n    ) +\n    geom_line(\n      data = model_data, \n      aes(x = Seconds, y = Power), \n      color = \"#FEA524\",\n      linewidth = 0.75\n    ) +\n    labs(\n      x = \"Time (min)\", \n      y = \"Power (W)\"\n    ) +\n    scale_x_continuous(\n      breaks = seq(120, 1800, 240),\n      labels = seq(2, 30, 4)\n    ) +\n    scale_y_continuous(breaks = pretty_breaks(n = 5)) +\n    theme_classic() +\n    theme(\n      axis.title = element_text(size = 14, face = \"bold\", color = \"black\"),\n      axis.text = element_text(size = 12, color = \"black\"),\n      axis.line = element_line(linewidth = 1.5, color = \"black\")\n    )\n  \n  plotly_fig <- ggplotly(plot) %>%\n    layout(\n      yaxis = list(\n        title = list(standoff = 20)  # Increase the space between the y-axis title and ticks\n      )\n    )\n  \n  return(plotly_fig)\n}\n\nplot_the_data_speed <- function(user_data, model_data){\n  \n  plot <- ggplot(user_data, aes(x = Seconds, y = Speed, label = Minutes)) +\n    geom_point(\n      shape = 21, \n      size = 3, \n      color = \"black\", \n      fill = \"white\"\n    ) +\n    geom_line(\n      data = model_data, \n      aes(x = Seconds, y = Speed), \n      color = \"#FEA524\",\n      linewidth = 0.75\n    ) +\n    labs(\n      x = \"Time (min)\", \n      y = \"Speed (m/s)\"\n    ) +\n    scale_x_continuous(\n      breaks = seq(120, 1800, 240),\n      labels = seq(2, 30, 4)\n    ) +\n    scale_y_continuous(breaks = pretty_breaks(n = 5)) +\n    theme_classic() +\n    theme(\n      axis.title = element_text(size = 14, face = \"bold\", color = \"black\"),\n      axis.text = element_text(size = 12, color = \"black\"),\n      axis.line = element_line(linewidth = 1.5, color = \"black\")\n    )\n  \n  plotly_fig <- ggplotly(plot) %>%\n    layout(\n      yaxis = list(\n        title = list(standoff = 20)  # Increase the space between the y-axis title and ticks\n      )\n    )\n  \n  return(plotly_fig)\n}\n\n\n# tags ----------------------------------------------------------\nlink_github <- tags$a(\n  href = \"https://github.com/timfulton1/intensity_duration_app\",\n  target = \"_blank\",  # Open in a new tab\n  icon(\"github\"),     # Use Font Awesome GitHub icon\n  style = \"color: white; font-size: 20px;\"\n)\n\n\n# UI ----------------------------------------------------------\nui <- page_navbar(\n  header = tags$head(\n    tags$style(HTML(\"\n      .form-control:focus {\n      border-color: #A0B3B7 !important; \n      box-shadow: 0 0 0.15rem 0.15rem #A0B3B7 !important;\n      }\n      .popover {\n      max-width: 650px;\n      }\n    \"))\n  ),\n  title = \"Intensity-Duration Analysis\",\n  bg = \"#013440\",\n  nav_spacer(),\n  # Power Tab ----------\n  tabPanel(\n    \"Critical Power\",\n    layout_sidebar(\n      sidebar = sidebar(\n        bg = \"#F7F7F7\",\n        width = 350,\n        title = NULL,\n        fill = FALSE,\n        card(\n          card_header(\n            \"Performance Data\",\n            popover(\n              bs_icon(\"question-circle\", size = \"1.3em\"),\n              title = \"Instructions\",\n              HTML(\"Enter power and duration data for at least 3 performances. \n              <br><br>\n              Each performance can be either a time to exhaustion test at a constant power or a fixed distance time trial (e.g., 4 km). \n              If using a fixed distance time trial, power may vary throughout the effort, so use the average power over the entire distance.\n              <br><br>\n              For the most accurate estimation of Critical Power and W Prime, choose performances lasting \n              between ~3 and ~20 minutes, spread across this range. For example, durations of 5, 10, and 15 minutes would provide a better  \n              estimation than durations of 4, 6, and 8 minutes.\")\n            ),\n            class = \"d-flex justify-content-between\"\n          ),\n          div(p(\"Trial 1\"), style = \"margin-bottom: -20px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_power_input(1), generate_duration_input(1),\n          ),\n          div(p(\"Trial 2\"), style = \"margin-bottom: -20px; margin-top: 10px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_power_input(2), generate_duration_input(2),\n          ),\n          div(p(\"Trial 3\"), style = \"margin-bottom: -20px; margin-top: 10px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_power_input(3), generate_duration_input(3),\n          ),\n          div(p(\"Trial 4\"), style = \"margin-bottom: -20px; margin-top: 10px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_power_input(4), generate_duration_input(4),\n          )\n        ),\n        card(\n          input_task_button(\"fit_button_power\", \"Fit your data\", type = \"default\"),\n          input_task_button(\"demo_button_power\", \"Use demo data\", type = \"default\")\n        )\n      ),\n      layout_column_wrap(\n        fill = FALSE,\n        width = 1/4,\n        value_box(\n          title = \"Critical Power (W)\",\n          value = textOutput(\"cp_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100,\n        ),\n        value_box(\n          title = \"W Prime (J)\",\n          value = textOutput(\"w_prime_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100\n        ),\n        value_box(\n          title = \"5 min Power (W)\",\n          value = textOutput(\"five_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100\n        ),\n        value_box(\n          title = \"20 min Power (W)\",\n          value = textOutput(\"twenty_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100\n        )\n      ),\n      card(\n        fill = FALSE,\n        height = 505,\n        card_header(\"Power-Duration Plot\", style = \"background-color: #F7F7F7;\"),\n        withSpinner(\n          plotlyOutput(\"plot_power\"), \n          type = 5,\n          color = \"#013440\",\n          size = 1\n        )\n      )\n    )\n  ),\n  # Speed Tab ----------\n  tabPanel(\n    \"Critical Speed\",\n    layout_sidebar(\n      sidebar = sidebar(\n        bg = \"#F7F7F7\",\n        width = 350,\n        title = NULL,\n        fill = FALSE,\n        card(\n          card_header(\n            \"Performance Data\",\n            popover(\n              bs_icon(\"question-circle\", size = \"1.3em\", class = \"info-icon\"),\n              title = \"Instructions\",\n              HTML(\"Enter distance and duration data for at least 3 performances. \n              <br><br>\n              For the most accurate estimation of Critical Speed and D Prime, choose performances lasting \n              between ~3 and ~20 minutes, spread across this range. For example, durations of 5, 10, and 15 minutes would provide a better  \n              estimation than durations of 4, 6, and 8 minutes.\")\n            ),\n            class = \"d-flex justify-content-between\"\n          ),\n          div(p(\"Trial 1\"), style = \"margin-bottom: -20px\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_distance_input(1), generate_duration_input(5),\n          ),\n          div(p(\"Trial 2\"), style = \"margin-bottom: -20px; margin-top: 10px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_distance_input(2), generate_duration_input(6),\n          ),\n          div(p(\"Trial 3\"), style = \"margin-bottom: -20px; margin-top: 10px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_distance_input(3), generate_duration_input(7),\n          ),\n          div(p(\"Trial 4\"), style = \"margin-bottom: -20px; margin-top: 10px;\"),\n          layout_column_wrap(\n            width = 1/2,\n            generate_distance_input(4), generate_duration_input(8),\n          )\n        ),\n        card(\n          input_task_button(\"fit_button_speed\", \"Fit your data\", type = \"default\"),\n          input_task_button(\"demo_button_speed\", \"Use demo data\", type = \"default\")\n        )\n      ),\n      layout_column_wrap(\n        fill = FALSE,\n        width = 1/4,\n        value_box(\n          title = \"Critical Speed (m/s)\",\n          value = textOutput(\"cs_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100,\n        ),\n        value_box(\n          title = \"D Prime (m)\",\n          value = textOutput(\"d_prime_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100\n        ),\n        value_box(\n          title = \"Mile\",\n          value = textOutput(\"mile_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100\n        ),\n        value_box(\n          title = \"5,000 m\",\n          value = textOutput(\"five_thousand_estimate\"),\n          theme = value_box_theme(bg = \"#A0B3B7\", fg = \"black\"), \n          max_height = 100\n        )\n      ),\n      card(\n        fill = FALSE,\n        height = 505,\n        card_header(\"Speed-Duration Plot\", style = \"background-color: #F7F7F7;\"),\n        withSpinner(\n          plotlyOutput(\"plot_speed\"), \n          type = 5,\n          color = \"#013440\",\n          size = 1\n        )\n      )\n    )\n  ),\n  tabPanel(\n    \"About\",\n    HTML(markdown(\"\n      #### Background\n\n      The sustainable duration of exercise is dependent upon the intensity (i.e., power or speed) at which the exercise is performed. \n      This fundamental concept is known as the intensity-duration relationship, and for exercise durations of ~2–40 minutes, can be modeled \n      by a two-parameter hyperbolic equation (see methods below). The critical intensity (power or speed) is the highest intensity that can be sustained \n      primarily by aerobic metabolism while still achieving a metabolic steady state. The critical intensity is also a metabolic threshold \n      such that exercising at intensities (powers or speeds) above the threshold will cause increased reliance on anaerobic metabolism and a greater accumulation of \n      fatigue-inducing metabolites. For a given intensity above the threshold, the time until task failure is dependent on the magnitude of the curvature constant\n      (W' or D'), suggesting that curvature constant can be viewed as a fatigue buffer (or fatigue constant). \n\n\n      #### Cycling Methods\n      The data are fit using a two parameter hyperbolic model according to the equation below:\")),\n\n      withMathJax(\"$$t = \\\\frac{W'}{P - CP}$$\"), \n      \n      HTML(markdown(\"\n      where `t` is the performance time (s), `W'` is the curvature constant (Joules), `P`is the performance power (W), and `CP` is the Critical Power (W). \n      \n      Two additional variables that are calculated in the application are:\n      \n      - **5 minute Power** - An estimate of the highest power that can be sustained for 5 minutes.\n      - **20 minute Power** - An estimate of the highest power that can be sustained for 20 minutes.\n\n\n      #### Running Methods\n      The data are fit using a two parameter hyperbolic model according to the equation below:\")),\n    \n      \n      withMathJax(\"$$t = \\\\frac{D'}{S - CS}$$\"),  \n    \n      HTML(markdown(\"where <code>t<\/code> is the performance time (s), <code>D'<\/code> is the curvature constant (m), <code>S<\/code> is the average speed (m/s), and\n              <code>CS<\/code> is the critical speed (m/s).\n      \n      Two additional variables that are calculated in the application are:\n      \n      - **Mile** - Estimated one mile performance.\n      - **5,000 m** - Estimated 5K performance.\n      \n      <br>\n      \n      \"))\n  ),\n  nav_item(link_github)\n)\n\n\n# Server ------------------------------------------------------------------\nserver <- function(input, output, session) {\n  \n  ## Power ---------------------------------------------------------------\n  # Reactive values list to store the inputs from UI\n  reactive_values <- reactiveValues(\n    power = c(power_1 = NA, power_2 = NA, power_3 = NA, power_4 = NA),\n    duration = c(duration_1 = NA, duration_2 = NA, duration_3 = NA, duration_4 = NA)\n  )\n  \n  # Update the reactive values when the fit button is clicked\n  observeEvent(input$fit_button_power, {\n    \n    for (i in 1:4) {\n      # Get the input values for power and duration\n      power_input <- input[[paste0(\"power_\", i)]]\n      duration_input <- input[[paste0(\"duration_\", i)]]\n      \n      # Update reactive_values with user input or otherwise update with NA\n      # This helps in scenarios where a user would fit the demo data, and then delete or replace the demo values\n      # There could be a better solution available but it works \n      if (!is.na(power_input) && power_input != \"\") {\n        reactive_values$power[i] <- power_input\n      } else {\n        reactive_values$power[i] <- NA  \n      }\n      \n      if (!is.na(duration_input) && duration_input != \"\") {\n        reactive_values$duration[i] <- duration_input\n      } else {\n        reactive_values$duration[i] <- NA  \n      }\n    }\n    \n    # Validate that there are at least 3 valid power and duration values\n    valid_power_count <- sum(!is.na(reactive_values$power))\n    valid_duration_count <- sum(!is.na(reactive_values$duration))\n    \n    if (valid_power_count < 3 || valid_duration_count < 3) {\n      # Show a modal with an error message\n      showModal(modalDialog(\n        title = \"Input Error\",\n        paste(\"Please enter Power and Duration values for at least 3 trials.\"),\n        easyClose = FALSE,\n        footer = modalButton(\"Close\")\n      ))\n    }\n    \n  })\n  \n  \n  # Update the reactive values and UI when the demo button is clicked\n  observeEvent(input$demo_button_power, {\n    \n    # create demo data\n    demo_power <- list(\n      power = c(487, 416, 375, 360),\n      duration = c(180, 330, 650, 1000)\n    )\n    \n    # Update reactive_values\n    reactive_values$power <- demo_power$power\n    reactive_values$duration <- demo_power$duration\n    \n    # Update the UI inputs\n    for (i in 1:4) {\n      updateTextInput(session, paste0(\"power_\", i), value = demo_power$power[i])\n      updateTextInput(session, paste0(\"duration_\", i), value = demo_power$duration[i])\n    }\n    \n  })\n  \n  \n  # Reactive expression to get the user data if at least 3 inputs for power are there\n  user_data <- reactive({\n    \n    req(sum(!is.na(reactive_values$power)) >= 3 && sum(!is.na(reactive_values$duration)) >= 3)\n    \n    tibble(\n      Power = as.numeric(reactive_values$power),\n      Seconds = as.numeric(reactive_values$duration),\n    ) %>% \n      mutate(Minutes = round(Seconds / 60, 2)) %>%\n      filter(!is.na(Power))\n    \n  })\n  \n  \n  # Value box outputs for Power\n  # Put these all in a reactive with validation to control for model errors\n  # This way nothing will show up in the boxes, but a model box, which is handled in the plot render function will show up \n  value_box_outputs <- reactive({\n    \n    validate(need(try(fit_the_data(user_data()) != \"error\"), \"\"))\n    \n    validate(need(try(fit_the_data(user_data())[[2]] > 0), \"\"))  # puts \"\" in boxes if the model runs but gives negative value\n    \n    \n    cp_estimate <- fit_the_data(user_data())[[2]]\n    w_prime_estimate <- fit_the_data(user_data())[[3]]\n    five_estimate <- fit_the_data(user_data())[[4]]\n    twenty_estimate <- fit_the_data(user_data())[[5]]\n    \n    list(cp_estimate, w_prime_estimate, five_estimate, twenty_estimate)\n    \n  })\n  \n  output$cp_estimate <- renderText(value_box_outputs()[[1]])\n  output$w_prime_estimate <- renderText(value_box_outputs()[[2]])\n  output$five_estimate <- renderText(value_box_outputs()[[3]])\n  output$twenty_estimate <- renderText(value_box_outputs()[[4]])\n  \n  \n  # Plot output for Power\n  output$plot_power <- renderPlotly({\n    \n    req(user_data())  # so that the modal box for the fit error doesn't populate on start up\n    \n    # Check if the fit data function returns an error\n    fit_data_result <- length(fit_the_data(user_data()))\n    \n    if (fit_data_result == 1) {\n      # Show a modal with an error message if fitting fails\n      showModal(modalDialog(\n        title = \"Fit Error\",\n        \"Unable to fit the data. Please refer to the instructions and make sure your data are physiologically relevant.\",\n        easyClose = FALSE,\n        footer = modalButton(\"Close\")\n      ))\n      return(NULL)  # Return NULL to prevent rendering of the plot if there's an error\n    }\n    \n    fit_the_data(user_data())[[6]]\n    \n  })\n  \n  \n  \n  ## Speed ------------------------------------------------------------------\n  # Reactive values list to store the inputs from UI\n  reactive_values_speed <- reactiveValues(\n    distance = c(distance_1 = NA, distance_2 = NA, distance_3 = NA, distance_4 = NA),\n    duration = c(duration_1 = NA, duration_2 = NA, duration_3 = NA, duration_4 = NA)\n  )\n  \n  # Update the reactive values when the fit button is clicked\n  observeEvent(input$fit_button_speed, {\n    \n    for (i in 1:4) {\n      # Get the input values for power and duration\n      distance_input <- input[[paste0(\"distance_\", i)]]\n      duration_input <- input[[paste0(\"duration_\", i+4)]]\n      \n      # Only update reactive_values if the input is not NULL or empty, otherwise update with NA\n      # This helps in scenarios where a user would fit the demo data, and then delete or replace the demo values\n      # There could be a better solution available but it works \n      if (!is.null(distance_input) && distance_input != \"\") {\n        reactive_values_speed$distance[i] <- distance_input\n      } else {\n        reactive_values_speed$distance[i] <- NA  \n      }\n      \n      if (!is.null(duration_input) && duration_input != \"\") {\n        reactive_values_speed$duration[i] <- duration_input\n      } else {\n        reactive_values_speed$duration[i] <- NA  \n      }\n    }\n    \n    # Validate that there are at least 3 valid distance and duration values\n    valid_distance_count <- sum(!is.na(reactive_values_speed$distance))\n    valid_duration_count <- sum(!is.na(reactive_values_speed$duration))\n    \n    if (valid_distance_count < 3 || valid_duration_count < 3) {\n      # Show a modal with an error message\n      showModal(modalDialog(\n        title = \"Input Error\",\n        paste(\"Please enter Distance and Duration values for at least 3 trials.\"),\n        easyClose = FALSE,\n        footer = modalButton(\"Close\")\n      ))\n    }\n    \n  })\n  \n  \n  # Update the reactive values and UI when the demo button is clicked\n  observeEvent(input$demo_button_speed, {\n    \n    # create demo data\n    demo_speed <- list(\n      distance = c(1200, 1500, 3000, 5000),\n      duration = c(180, 230, 483, 820)\n    )\n    \n    # Update reactive_values\n    reactive_values_speed$distance <- demo_speed$distance\n    reactive_values_speed$duration <- demo_speed$duration\n    \n    # Update the UI inputs\n    for (i in 1:4) {\n      updateTextInput(session, paste0(\"distance_\", i), value = demo_speed$distance[i])\n      updateTextInput(session, paste0(\"duration_\", i+4), value = demo_speed$duration[i])\n    }\n    \n  })\n  \n  \n  # Reactive expression to get the user data if there are at least 3 inputs\n  user_data_speed <- reactive({\n    \n    req(sum(!is.na(reactive_values_speed$distance)) >= 3 && sum(!is.na(reactive_values_speed$duration)) >= 3)\n    \n    tibble(\n      Distance = as.numeric(reactive_values_speed$distance),\n      Seconds = as.numeric(reactive_values_speed$duration),\n    ) %>% \n      mutate(\n        Minutes = round(Seconds / 60, 2),\n        Speed = Distance / Seconds\n      ) %>%\n      filter(!is.na(Speed))\n    \n  })\n  \n  \n  # Value box outputs for Speed\n  # Put these all in a reactive with validation to control for model errors\n  # This way nothing will show up in the boxes, but a model box, which is handled in the plot render function will show up \n  value_box_outputs_speed <- reactive({\n    \n    validate(need(try(fit_the_data_speed(user_data_speed()) != \"error\"), \"\"))  # puts \"\" in boxes if error occurs\n    \n    validate(need(try(fit_the_data_speed(user_data_speed())[[2]] > 0), \"\"))  # puts \"\" in boxes if the model runs but gives negative value\n    \n    cs_estimate <- fit_the_data_speed(user_data_speed())[[2]]\n    d_prime_estimate <- fit_the_data_speed(user_data_speed())[[3]]\n    mile_estimate <- fit_the_data_speed(user_data_speed())[[4]]\n    five_thousand_estimate <- fit_the_data_speed(user_data_speed())[[5]]\n    \n    list(cs_estimate, d_prime_estimate, mile_estimate, five_thousand_estimate)\n    \n  })\n  \n  output$cs_estimate <- renderText(value_box_outputs_speed()[[1]])\n  output$d_prime_estimate <- renderText(value_box_outputs_speed()[[2]])\n  output$mile_estimate <- renderText(value_box_outputs_speed()[[3]])\n  output$five_thousand_estimate <- renderText(value_box_outputs_speed()[[4]])\n  \n  # Plot output for speed\n  output$plot_speed <- renderPlotly({\n    \n    req(user_data_speed())  # so that the modal box for the fit error doesn't populate on start up\n    \n    # Check if the fit data function returns an error\n    fit_data_result <- length(fit_the_data_speed(user_data_speed()))\n    \n    if (fit_data_result == 1 | fit_the_data_speed(user_data_speed())[[2]] < 0) {\n      # Show a modal with an error message if fitting fails\n      showModal(modalDialog(\n        title = \"Fit Error\",\n        \"Unable to fit the data. Please refer to the instructions and make sure your data are physiologically relevant.\",\n        easyClose = FALSE,\n        footer = modalButton(\"Close\")\n      ))\n      return(NULL)  # Return NULL to prevent rendering of the plot if there's an error\n    }\n    \n    fit_the_data_speed(user_data_speed())[[6]]\n    \n  })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
